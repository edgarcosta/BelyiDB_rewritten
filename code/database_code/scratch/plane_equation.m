load "config.m";
s := BelyiDBGet(4,1)[2];
C := s`BelyiDBBelyiCurves[1];
phi := s`BelyiDBBelyiMaps[1];
KX<x,y> := Parent(phi);
QQ := Rationals();
phi0 := Numerator(phi);
phioo := Denominator(phi);
R<X,Y,Phi,v> := PolynomialRing(QQ,4);
h := hom< KX -> R | [X,Y]>;
curve_eqn := DefiningEquation(AffinePatch(C,1));
h_curve := hom< Parent(curve_eqn) -> R | [X,Y]>;
//I := ideal< R | h_curve(curve_eqn), h(phioo)*Phi - h(phi0)>;
I := ideal< R | h_curve(curve_eqn), h(phioo)*Phi - h(phi0), v*h(phioo) - 1>;
//new_eqn := Basis(EliminationIdeal(I,1))[1];
new_eqn := Basis(EliminationIdeal(I,{Y,Phi}))[1];
S<x,y> := PolynomialRing(QQ,2);
//h_plane := hom< Parent(new_eqn) -> S | [0,y,x] >;
h_plane := hom< Parent(new_eqn) -> S | [0,y,x,0] >;
/*
C_red := Curve(AffineSpace(S),h_plane(new_eqn));
irreds := IrreducibleComponents(C_red);
C_plane := Curve(irreds[3]);
*/
C_plane := Curve(AffineSpace(S),h_plane(new_eqn));
printf "New curve is %o\n", C_plane;
KC_plane<x> := FunctionField(C_plane);
printf "New Belyi map is x, whose divisor has support\n";
Support(Divisor(x));
Support(Divisor(x-1));

// printout
/*
BelyiDBGet(4,1);
s := $1[#$1];
s;
s`BelyiDBBelyiCurves;
X := $1[1];
s`BelyiDBBelyiMaps;
phi := $1[1];
Numerator(phi);
QQ := Rationals();
phi0 := Numerator(phi);
phioo := Denominator(phi);
R<X,Y,Phi> := PolynomialRing(QQ,3);
phi0
;
R!phi0;
Parent(phi);
KX<x,y> := $1;
h := hom< KX -> R | [X,Y]>;
h;
h(phi0);
X;
C := s`BelyiDBBelyiCurves;
DefiningEquation(C);
C := s`BelyiDBBelyiCurves[1];
DefiningEquation(C);
AffinePatch(C,1);
DefiningEquation($1);
curve_eqn := $1;
R!curve_eqn;
Parent(curve_eqn);
h_curve := hom< Parent(curve_eqn) -> R | [X,Y]>;
h_curve(curve_eqn);
I := ideal< R | h_curve(curve_eqn), h(phioo)*Phi - h(phi0)>;
I;
EliminationIdeal(I,X);
EliminationIdeal;
EliminationIdeal(I,1);
Basis($1);
new_eqn := $1[1];
new_eqn;
Curve(AffineSpace(QQ,2),new_eqn);
S<x,y> := PolynomialRing(QQ,2);
S!new_eqn;
h_plane = hom< Parent(new_eqn) -> S | [x,y] >;
h_plane := hom< Parent(new_eqn) -> S | [x,y] >;
h_plane := hom< Parent(new_eqn) -> S | [0,x,y] >;
h_plane(new_eqn);
Coefficients(new_eqn);
Coefficients(h_plane(new_eqn));
Curve(AffineSpace(QQ,2),new_eqn);
Curve(AffineSpace(QQ,2),h_plane(new_eqn));
C_plane := $1;
AffineSpace(S);
Curve(AffineSpace(S),h_plane(new_eqn));
C_plane := $1;
SingularPoints(C_plane);
x;
Support(Divisor(x));
KC_plane<t> := FunctionField(C_plane);
C_plane;
IrreducibleComponents(C_plane);
C_plane_irred := $1[3];
C_plane_irred;
Curve($1);
C_new;
C_new := $1;
C_new;
Support(Divisor(x));
KC_new<x> := FunctionField(C_new);
Support(Divisor(x));
Support(Divisor(x-1));
Support(Divisor(phi));
Support(Divisor(phi-1));
Support(Divisor(Differential(phi)));
Support(Divisor(Differential(x)));
S<x,y> := PolynomialRing(QQ,2);
KC_new<t> := FunctionField(C_new);
Support(Divisor(t));
Support(Divisor(t-1));
KC_new!x;
C_new;
Genus(C_new);
SingularPoints(C_new);
KC_new<x,y> := FunctionField(C_new);
Support(Divisor(y));
Support(Divisor(y-1));
*/
